"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[48],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=m(n),u=a,h=c["".concat(s,".").concat(u)]||c[u]||d[u]||i;return n?r.createElement(h,l(l({ref:t},p),{},{components:n})):r.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var m=2;m<i;m++)l[m]=n[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},551:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var r=n(7462),a=(n(7294),n(4137));const i={id:"learn",sidebar_position:1,title:"Learn"},l=void 0,o={unversionedId:"Prepare/learn",id:"Prepare/learn",title:"Learn",description:"Installing and Configuring IBM MQ and RDQM",source:"@site/docs/2-Prepare/1-Learn.md",sourceDirName:"2-Prepare",slug:"/Prepare/learn",permalink:"/solution-mq-rdqm-hadr/Prepare/learn",draft:!1,editUrl:"https://github.com/ibm-client-engineering/solution-mq-rdqm-hadr.git/docs/2-Prepare/1-Learn.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"learn",sidebar_position:1,title:"Learn"},sidebar:"tutorialSidebar",previous:{title:"Prepare",permalink:"/solution-mq-rdqm-hadr/category/prepare"},next:{title:"Organize",permalink:"/solution-mq-rdqm-hadr/Prepare/organize"}},s={},m=[{value:"Installing and Configuring IBM MQ and RDQM",id:"installing-and-configuring-ibm-mq-and-rdqm",level:3},{value:"Installation of MQ",id:"installation-of-mq",level:3},{value:"Host layout",id:"host-layout",level:4},{value:"System preparation",id:"system-preparation",level:4},{value:"Installing MQ",id:"installing-mq",level:4},{value:"Installing RDQM",id:"installing-rdqm",level:3},{value:"Creating A Disaster Recovery Queue",id:"creating-a-disaster-recovery-queue",level:3},{value:"Creating DRHAQM1 With Primary in DC",id:"creating-drhaqm1-with-primary-in-dc",level:4},{value:"Installing MQIPT",id:"installing-mqipt",level:3},{value:"Enable MQIPT as a system service",id:"enable-mqipt-as-a-system-service",level:4},{value:"Templating the service file for multiple MQIPT instances",id:"templating-the-service-file-for-multiple-mqipt-instances",level:4},{value:"Creating the new queue manager",id:"creating-the-new-queue-manager",level:4},{value:"Configuring SSL in Queue Manager and client",id:"configuring-ssl-in-queue-manager-and-client",level:4},{value:"Setting the channel auth for SSL",id:"setting-the-channel-auth-for-ssl",level:4},{value:"Configuring MQ-IPT for SSLServer/Client",id:"configuring-mq-ipt-for-sslserverclient",level:3},{value:"MQ to MQ and SSL encryption",id:"mq-to-mq-and-ssl-encryption",level:3},{value:"Connecting two queue managers via SSL/TLS and self-signed certs",id:"connecting-two-queue-managers-via-ssltls-and-self-signed-certs",level:3},{value:"Denying connections based on SSLPEER",id:"denying-connections-based-on-sslpeer",level:3}],p={toc:m},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"installing-and-configuring-ibm-mq-and-rdqm"},"Installing and Configuring IBM MQ and RDQM"),(0,a.kt)("p",null,"This document serves as a documented process for installing IBM MQ and RDMQ bound to the # Solution Strategy. It assumes some basic familiarlity with Linux command line."),(0,a.kt)("h3",{id:"installation-of-mq"},"Installation of MQ"),(0,a.kt)("p",null,"In order to build out our setup, we are assuming three hosts that live in three different zones in a Dallas region and three hosts in three zones living in the Washington DC region . Our bastion host will also live in WDC and that's where we'll base our primary HA stack. We also assume root access via ssh to all hosts here. The OS on the mq hosts for our purposes will be ",(0,a.kt)("strong",{parentName:"p"},"Red Hat 8.4"),". We will also assume they are properly subscribed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"10.241.1.4      wdc-bastion\n\n# WDC mq hosts\n10.241.0.4          wdc1-mq1\n10.241.64.4         wdc2-mq1\n10.241.128.4        wdc3-mq1\n\n# DAL mq hosts\n10.240.0.4          dal1-mq1\n10.240.64.4         dal2-mq1\n10.240.128.4        dal3-mq1\n")),(0,a.kt)("p",null,"Above is what the hosts file on our bastion host should look like. We would connect to the bastion host via a public ip. We won't go into configuring ssh ",(0,a.kt)("inlineCode",{parentName:"p"},"proxyjump")," in this section."),(0,a.kt)("h4",{id:"host-layout"},"Host layout"),(0,a.kt)("p",null,"Each of the above hosts barring the bastion have two extra disks attached:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Disk /dev/vda: 100 GiB, 107374182400 bytes, 209715200 sectors\nDisk /dev/vdb: 100 GiB, 107374182400 bytes, 209715200 sectors\nDisk /dev/vde: 25 GiB, 26843545600 bytes, 52428800 sectors\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/dev/vda")," is our boot volume"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/dev/vdb")," will become our logical volume for ",(0,a.kt)("inlineCode",{parentName:"li"},"/var/mqm")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/dev/vde")," will be our RDQM managed volume")),(0,a.kt)("p",null,"IBM MQ installation recommends multiple separate disks for various aspects of MQ to increase performance and minimize overall I/O during heavy operations. For our purposes, we will only be going with one volume for MQ."),(0,a.kt)("h4",{id:"system-preparation"},"System preparation"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create the mqm userid and group. This step occurs on all host minus the bastion host.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'groupadd -g 1001 mqm\nuseradd -g mqm -u 1001 -m -c "MQM User" mqm\n')),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Update mqm user's bashrc and bash profile. These paths don't exist as of yet until the actual installation of MQ. This needs to be done on all nodes.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"echo \"export MQ_INSTALLATION_PATH=/opt/mqm\" >> ~mqm/.bashrc\necho '. $MQ_INSTALLATION_PATH/bin/setmqenv -s' >> ~mqm/.bashrc\necho 'export PATH=$PATH:/opt/mqm/bin:/opt/mqm/samp/bin:' >> ~mqm/.bash_profile\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Update ",(0,a.kt)("inlineCode",{parentName:"li"},"/etc/sudoers")," with the correct permissions for mqm user on all nodes.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'echo "%mqm ALL=(ALL) NOPASSWD: /opt/mqm/bin/crtmqm,/opt/mqm/bin/dltmqm,/opt/mqm/bin/rdqmadm,/opt/mqm/bin/rdqmstatus" >> /etc/sudoers\n')),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"OPTIONAL")," - for ease of use and communication, you can create an ssh key for the ",(0,a.kt)("inlineCode",{parentName:"p"},"mqm")," user and propagate it across the nodes in each stack. This isn't required, but it can mean you might only need to run some commands on the primary node in each stack and it will run the appropriate commands on each node behind the scenes."),(0,a.kt)("p",{parentName:"li"},"On Node 1:"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"as mqm user\n[mqm@wdc1-mq1 ~]$ ssh-keygen -t rsa -f /home/mqm/.ssh/id_rsa -N ''\n[mqm@dal1-mq1 ~]$ ssh-keygen -t rsa -f /home/mqm/.ssh/id_rsa -N ''\n")),(0,a.kt)("p",null,"Manually copy the public key to the ",(0,a.kt)("inlineCode",{parentName:"p"},"authorized_keys")," file in ",(0,a.kt)("inlineCode",{parentName:"p"},"~/.ssh")," for ",(0,a.kt)("inlineCode",{parentName:"p"},"mqm")," user on each node in each stack."),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},"Install lvm2 if it's not already there on all nodes")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"dnf -y install lvm2\n")),(0,a.kt)("ol",{start:6},(0,a.kt)("li",{parentName:"ol"},"Setup the volume group and logical volume for ",(0,a.kt)("inlineCode",{parentName:"li"},"/var/mqm")," on all nodes. Device names may be different depending on your environment.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"pvcreate /dev/vdb\nvgcreate MQStorageVG /dev/vdb\nlvcreate -n MQStorageLV -l100%VG MQStorageVG\n")),(0,a.kt)("ol",{start:7},(0,a.kt)("li",{parentName:"ol"},"Create the ",(0,a.kt)("inlineCode",{parentName:"li"},"/var/mqm")," directory and format the storage volume")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mkdir /var/mqm\nmkfs.xfs /dev/MQStorageVG/MQStorageLV\nmount /dev/MQStorageVG/MQStorageLV /var/mqm\n")),(0,a.kt)("ol",{start:8},(0,a.kt)("li",{parentName:"ol"},"Make sure ",(0,a.kt)("inlineCode",{parentName:"li"},"/var/mqm")," is fully owned by the mqm user and that everything is setup in ",(0,a.kt)("inlineCode",{parentName:"li"},"/etc/fstab"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'chown -R mqm:mqm /var/mqm\nchmod 755 /var/mqm\necho "/dev/MQStorageVG/MQStorageLV      /var/mqm        xfs     defaults        1 2" >> /etc/fstab\n')),(0,a.kt)("ol",{start:9},(0,a.kt)("li",{parentName:"ol"},"Configure the storage volume for RDQM. ",(0,a.kt)("strong",{parentName:"li"},"It's critical that the volume group is named ",(0,a.kt)("inlineCode",{parentName:"strong"},"drbdpool"),"."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"parted -s -a optimal /dev/vde mklabel gpt 'mkpart primary ext4 1 -1'\npvcreate /dev/vde1\nvgcreate drbdpool /dev/vde1\n")),(0,a.kt)("ol",{start:10},(0,a.kt)("li",{parentName:"ol"},"For SELinux: If keeping selinux set to targeted, run the following:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"semanage permissive -a drbd_t\n")),(0,a.kt)("ol",{start:11},(0,a.kt)("li",{parentName:"ol"},"Add the following settings to ",(0,a.kt)("inlineCode",{parentName:"li"},"/etc/sysctl.conf"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kernel.shmmni = 4096\nkernel.shmall = 2097152\nkernel.shmmax = 268435456\nkernel.sem = 32 4096 32 128\nfs.file-max = 524288\n")),(0,a.kt)("p",null,"Execute sysctl"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"sysctl -p\n")),(0,a.kt)("ol",{start:12},(0,a.kt)("li",{parentName:"ol"},"Set the ulimit for the mqm user by adding the following to ",(0,a.kt)("inlineCode",{parentName:"li"},"/etc/security/limits.conf"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# For MQM User\nmqm       hard  nofile     10240\nmqm       soft  nofile     10240\n")),(0,a.kt)("h4",{id:"installing-mq"},"Installing MQ"),(0,a.kt)("p",null,"This requires you to go to the following link and retrieving IBM MQ Advanced developer version 9.2.5:"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www14.software.ibm.com/cgi-bin/weblap/lap.pl?popup=Y&li_formnum=L-APIG-BYHCL7&accepted_url=https://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/messaging/mqadv/mqadv_dev925_linux_x86-64.tar.gz"},(0,a.kt)("strong",{parentName:"a"},"mqadv_dev925_linux_x86-64.tar.gz"))),(0,a.kt)("p",null,"Once you have the package,  you will need to upload it to all six hosts. This document will assume you have done this. The following steps need to be taken on each host."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Extract the package on each host")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"tar zxvf mqadv_dev931_linux_x86-64.tar.gz\ncd MQServer\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Run the mqlicense script to accept the IBM license")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"./mqlicense.sh -accept\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Install the packages for MQ on each host")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"dnf -y install MQSeries*.rpm --nogpgcheck\n")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Run the following command ",(0,a.kt)("strong",{parentName:"li"},"ONLY")," on the primary node in each stack. For example, for our WDC stack we would run this on ",(0,a.kt)("inlineCode",{parentName:"li"},"wdc1-mq1")," and for our Dallas stack we would run this only on ",(0,a.kt)("inlineCode",{parentName:"li"},"dal1-mq1"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[root@dal1-mq1 ~]# /opt/mqm/bin/setmqinst -i -p /opt/mqm\n[root@wdc1-mq1 ~]# /opt/mqm/bin/setmqinst -i -p /opt/mqm\n")),(0,a.kt)("h3",{id:"installing-rdqm"},"Installing RDQM"),(0,a.kt)("p",null,"One of the primary components for RDQM is DRBD. IBM packages its own kmod-drbd packages with the MQ tar file. This is why knowing what kernel version you are running is critical. For this, IBM included a script called ",(0,a.kt)("inlineCode",{parentName:"p"},"modver"),". The following commands need to be performed on every host in each region."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"On each host, run the ",(0,a.kt)("inlineCode",{parentName:"li"},"modver")," script to determine which kmod to install")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cd ~/MQServer/Advanced/RDQM/PreReqs/el8/kmod-drbd-9\n./modver\nkmod-drbd-9.1.5_4.18.0_305-1.x86_64.rpm\n")),(0,a.kt)("p",null,"This should show you which of the kernel packages in that directory that you need to install. If it returns any sort of error, you need to follow the link it provides and download the appropriate kmod-drbd version."),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Install the kmod-drbd version")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cd ~/MQServer/Advanced/RDQM/PreReqs/el8/kmod-drbd-9\ndnf -y install $(./modver) --nogpgcheck\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Install pacemaker and drbd-utils")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cd MQServer/Advanced/RDQM/PreReqs/el8/pacemaker-2\ndnf -y install *.rpm --nogpgcheck\n\ncd MQServer/Advanced/RDQM/PreReqs/el8/drbd-utils-9/\ndnf -y install *.rpm --nogpgcheck\n")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Install policycoretutils-python-utils to set the correct security context for DRBD")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"dnf -y install policycoreutils-python-utils\nsemanage permissive -a drbd_t\n")),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},"Configure ",(0,a.kt)("inlineCode",{parentName:"li"},"firewalld")," on each host. We're going to add a range of ports for async communication between stacks as well as between nodes. We'll also add our listener ports for the queue listener services.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"firewall-cmd --add-port=6996-7800/tcp --permanent\nfirewall-cmd --add-port=1414-1514/tcp --permanent\nfirewall-cmd --reload\n")),(0,a.kt)("ol",{start:6},(0,a.kt)("li",{parentName:"ol"},"Finally, install the RDQM package itself")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"dnf -y install ~/MQServer/Advanced/RDQM/MQSeriesRDQM-9.2.5-0.x86_64.rpm --nogpgcheck\n")),(0,a.kt)("ol",{start:7},(0,a.kt)("li",{parentName:"ol"},"Edit ",(0,a.kt)("inlineCode",{parentName:"li"},"/var/mqm/rdqm.ini")," and add in the hosts for that stack. This will be different per region but the ",(0,a.kt)("inlineCode",{parentName:"li"},"Name")," field needs to be added to the default file and it ",(0,a.kt)("strong",{parentName:"li"},"must")," match the hostname of each node:")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"/var/mqm/rdqm.ini")," in WDC"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Node:\n  Name=wdc1-mq1\n  HA_Replication=10.241.0.4\n#  HA_Primary=\n#  HA_Alternate=\n#  DR_Replication=\nNode:\n  Name=wdc2-mq1\n  HA_Replication=10.241.64.4\n#  HA_Primary=\n#  HA_Alternate=\n#  DR_Replication=\nNode:\n  Name=wdc3-mq1\n  HA_Replication=10.241.128.4\n#  HA_Primary=\n#  HA_Alternate=\n#  DR_Replication=\n\n#DRGroup:\n#  Name=\n#  DR_Replication=\n#  DR_Replication=\n#  DR_Replication=\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"/var/mqm/rdqm.ini")," in DAL"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Node:\n  Name=dal1-mq1\n  HA_Replication=10.240.0.4\n#  HA_Primary=\n#  HA_Alternate=\n#  DR_Replication=\nNode:\n  Name=dal2-mq1\n  HA_Replication=10.240.64.4\n#  HA_Primary=\n#  HA_Alternate=\n#  DR_Replication=\nNode:\n  Name=dal3-mq1\n  HA_Replication=10.240.128.4\n#  HA_Primary=\n#  HA_Alternate=\n#  DR_Replication=\n\n#DRGroup:\n#  Name=\n#  DR_Replication=\n#  DR_Replication=\n#  DR_Replication=\n\n")),(0,a.kt)("ol",{start:8},(0,a.kt)("li",{parentName:"ol"},"Run the following on the primary node in each region:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"/opt/mqm/bin/rdqmadm -c\n")),(0,a.kt)("p",null,"If the ssh key was configured as mentioned above, the mqm user should be able to run this command on each node in the background. Otherwise the STDOUT returned will tell you wnat nodes still need to have it run."),(0,a.kt)("ol",{start:9},(0,a.kt)("li",{parentName:"ol"},"Verify we're all online with:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"rdqmstatus -n\n")),(0,a.kt)("ol",{start:10},(0,a.kt)("li",{parentName:"ol"},"Update the groups for ",(0,a.kt)("inlineCode",{parentName:"li"},"mqm")," user. The ",(0,a.kt)("inlineCode",{parentName:"li"},"mqm")," user must be a member of the ",(0,a.kt)("inlineCode",{parentName:"li"},"haclient")," group in order to perform some tasks on replicated queumanagers like ",(0,a.kt)("inlineCode",{parentName:"li"},"endmqm")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"strmqm"),". This must be run on all nodes.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"usermod -a -G haclient mqm\n")),(0,a.kt)("h3",{id:"creating-a-disaster-recovery-queue"},"Creating A Disaster Recovery Queue"),(0,a.kt)("p",null,"Now we are at the meat and potatoes. We're going to cover the steps to create a DR queue that is async replicated between regions. Let's get started."),(0,a.kt)("p",null,"Order is everything when it comes to creating a DR queue. The creation command is always run on the last node first and first node last."),(0,a.kt)("h4",{id:"creating-drhaqm1-with-primary-in-dc"},"Creating DRHAQM1 With Primary in DC"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"WDC region\n[mqm@wdc3-mq1 ~]$ sudo /opt/mqm/bin/crtmqm -sxs -rr p -rl 10.241.0.4,10.241.64.4,10.241.128.4 -ri 10.240.0.4,10.240.64.4,10.240.128.4 -rp 7001 -fs 3072M DRHAQM1\n[mqm@wdc2-mq1 ~]$ sudo /opt/mqm/bin/crtmqm -sxs -rr p -rl 10.241.0.4,10.241.64.4,10.241.128.4 -ri 10.240.0.4,10.240.64.4,10.240.128.4 -rp 7001 -fs 3072M DRHAQM1\n[mqm@wdc1-mq1 ~]$ sudo /opt/mqm/bin/crtmqm -sx -rr p -p 1501 -rl 10.241.0.4,10.241.64.4,10.241.128.4 -ri 10.240.0.4,10.240.64.4,10.240.128.4 -rp 7001 -fs 3072M DRHAQM1 # Primary node in the stack\n\nDAL region\n[mqm@dal3-mq1 ~]$ sudo /opt/mqm/bin/crtmqm -sxs -rr s -ri 10.241.0.4,10.241.64.4,10.241.128.4 -rl 10.240.0.4,10.240.64.4,10.240.128.4 -rp 7001 -fs 3072M DRHAQM1\n[mqm@dal2-mq1 ~]$ sudo /opt/mqm/bin/crtmqm -sxs -rr s -ri 10.241.0.4,10.241.64.4,10.241.128.4 -rl 10.240.0.4,10.240.64.4,10.240.128.4 -rp 7001 -fs 3072M DRHAQM1\n[mqm@dal1-mq1 ~]$ sudo /opt/mqm/bin/crtmqm -sx -rr s -ri 10.241.0.4,10.241.64.4,10.241.128.4 -rl 10.240.0.4,10.240.64.4,10.240.128.4 -rp 7001 -fs 3072M DRHAQM1 # Primary node in the stack\n")),(0,a.kt)("p",null,"Let's break down these commands:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"crtmqm"))," - command to actually create the queues"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"-sxs"))," - Replicated data HA secondary queue manager. This is run only on secondary or standby nodes when creating the queue."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"-sx"))," - Replicated data HA Primary queue manager. This is run only on a primary node where you want the queue to live."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"-rr [p,s]")),' - This is region specific. When you create your DR Queue, you would use "p" for the region you want to be DR Primary and "s" for the region you want to be standby. If you accidentally use "p" for both regions, your clusters will not talk to each other.'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"-rl")),"  ",(0,a.kt)("inlineCode",{parentName:"li"},"10.241.0.4,10.241.64.4,10.241.128.4")," - Specifies the local ip address(es) to be used for DR replication of this queue manager. Basically your local region nodes go here."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"-ri")),"  ",(0,a.kt)("inlineCode",{parentName:"li"},"10.240.0.4,10.240.64.4,10.240.128.4")," - Specifies the IP address of the interface used for replication on the server hosting the secondary instance of the queue manager. Basically your remote region's nodes."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"-rp 7001"))," - Specifies the port to use for DR replication. We're using port 7001 in this example."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"-fs 3072M"))," - Specifies the size of the filesystem to create for the queue manager - that is, the size of the logical volume which is created in the drbdpool volume group. Another logical volume of that size is also created, to support the reverting to snapshot operation, so the total storage for the DR RDQM is just over twice that specified here.")),(0,a.kt)("p",null,"If everything was done correctly, you should be able to log into your primary node in your primary region and run the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 ~]$ sudo rdqmstatus -m DRHAQM1\nNode:                                   wdc1-mq1\nQueue manager status:                   Running\nCPU:                                    0.00%\nMemory:                                 182MB\nQueue manager file system:              58MB used, 2.9GB allocated [2%]\nHA role:                                Primary\nHA status:                              Normal\nHA control:                             Enabled\nHA current location:                    This node\nHA preferred location:                  This node\nHA blocked location:                    None\nHA floating IP interface:               None\nHA floating IP address:                 None\nDR role:                                Primary\nDR status:                              Normal\nDR port:                                7001\nDR local IP address:                    10.241.0.4\nDR remote IP address list:              10.240.0.4,10.240.64.4,10.240.128.4\nDR current remote IP address:           10.240.0.4\n\nNode:                                   wdc2-mq1\nHA status:                              Normal\n\nNode:                                   wdc3-mq1\nHA status:                              Normal\n\n[mqm@dal1-mq1 ~]$ sudo rdqmstatus -m DRHAQM1\nNode:                                   dal1-mq1\nQueue manager status:                   Ended immediately\nHA role:                                Primary\nHA status:                              Normal\nHA control:                             Enabled\nHA current location:                    This node\nHA preferred location:                  This node\nHA blocked location:                    None\nHA floating IP interface:               None\nHA floating IP address:                 None\nDR role:                                Secondary\nDR status:                              Normal\nDR port:                                7001\nDR local IP address:                    10.240.0.4\nDR remote IP address list:              10.241.0.4,10.241.64.4,10.241.128.4\nDR current remote IP address:           10.241.0.4\n\nNode:                                   dal2-mq1\nHA status:                              Normal\n\nNode:                                   dal3-mq1\nHA status:                              Normal\n")),(0,a.kt)("p",null,"This queue service listener should be active on port 1501 on the primary node in the primary region only."),(0,a.kt)("p",null,"You can test failover with the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"This tells the first node in the WDC region to become DR standby for the DRHAQM1 queue service\n[root@wdc1-mq1 ~]# rdqmdr -s -m DRHAQM1\n\n\nThis tells the first node in the DAL region to become DR primary for the DRHAQM1 queue service\n[root@dal1-mq1 ~]# rdqmdr -p -m DRHAQM1\n")),(0,a.kt)("p",null,"So now the output of ",(0,a.kt)("inlineCode",{parentName:"p"},"rdqmstatus")," will be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[root@dal1-mq1 ~]# sudo rdqmstatus -m DRHAQM1\nNode:                                   dal1-mq1\nQueue manager status:                   Running\nCPU:                                    1.09%\nMemory:                                 182MB\nQueue manager file system:              58MB used, 2.9GB allocated [2%]\nHA role:                                Primary\nHA status:                              Normal\nHA control:                             Enabled\nHA current location:                    This node\nHA preferred location:                  This node\nHA blocked location:                    None\nHA floating IP interface:               None\nHA floating IP address:                 None\nDR role:                                Primary\nDR status:                              Normal\nDR port:                                7001\nDR local IP address:                    10.240.0.4\nDR remote IP address list:              10.241.0.4,10.241.64.4,10.241.128.4\nDR current remote IP address:           10.241.0.4\n\nNode:                                   dal2-mq1\nHA status:                              Normal\n\nNode:                                   dal3-mq1\nHA status:                              Normal\n\n[root@wdc1-mq1 ~]# sudo rdqmstatus -m DRHAQM1\nNode:                                   wdc1-mq1\nQueue manager status:                   Ended immediately\nHA role:                                Primary\nHA status:                              Normal\nHA control:                             Enabled\nHA current location:                    This node\nHA preferred location:                  This node\nHA blocked location:                    None\nHA floating IP interface:               None\nHA floating IP address:                 None\nDR role:                                Secondary\nDR status:                              Normal\nDR port:                                7001\nDR local IP address:                    10.241.0.4\nDR remote IP address list:              10.240.0.4,10.240.64.4,10.240.128.4\nDR current remote IP address:           10.240.0.4\n\nNode:                                   wdc2-mq1\nHA status:                              Normal\n\nNode:                                   wdc3-mq1\nHA status:                              Normal\n\n")),(0,a.kt)("p",null,"You can fail everything back with the following commands"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[root@dal1-mq1 ~]# rdqmdr -s -m DRHAQM1\n\n[root@wdc1-mq1 ~]# rdqmdr -p -m DRHAQM1\n\n")),(0,a.kt)("p",null,"The queue service should be accessible via port ",(0,a.kt)("inlineCode",{parentName:"p"},"1501")," on the primary node in the primary region."),(0,a.kt)("h3",{id:"installing-mqipt"},"Installing MQIPT"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"SSH into your MQIPT server(s)."),(0,a.kt)("li",{parentName:"ul"},"Download and stage the MQIPT Software from ",(0,a.kt)("a",{parentName:"li",href:"https://www.ibm.com/support/fixcentral/swg/selectFixes?parent=ibm%7EWebSphere&product=ibm/WebSphere/WebSphere+MQ&release=9.2.0.0&platform=All&function=all"},"IBM Fix Central"))),(0,a.kt)("p",null,"In our instance we are downloading version ",(0,a.kt)("inlineCode",{parentName:"p"},"9.2.5.0-IBM-MQIPT-LinuxX64")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"wget https://ak-delivery04-mul.dhe.ibm.com/sdfdl/v2/sar/CM/WS/0abcp/0/Xa.2/Xb.jusyLTSp44S0Bn8mossn7uopQHHST9iA1hmsJz52XllxgZWtruzIzbUG_ZE/Xc.CM/WS/0abcp/0/9.2.5.0-IBM-MQIPT-LinuxX64.tar.gz/Xd./Xf.LPR.D1VK/Xg.11755825/Xi.habanero/XY.habanero/XZ.1osh26bJ4dLZBVRjImrn31hkVvRbtvt0/9.2.5.0-IBM-MQIPT-LinuxX64.tar.gz\n")),(0,a.kt)("p",null,"Please note that the ",(0,a.kt)("inlineCode",{parentName:"p"},"wget")," command will not work - we are simply copying the direct link to the download from Fix Central and using ",(0,a.kt)("inlineCode",{parentName:"p"},"wget")," to stage the software directly on the MQIPT servers."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create a directory to unpack the MQ IPT Software")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mkdir -p /opt/mqipt/installation1\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Unpack the MQIPT software and modify permissions")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cd /opt/mqipt/installation1/\ntar zxvf ~/9.2.5.0-IBM-MQIPT-LinuxX64.tar.gz\nchmod -R a-w /opt/mqipt/installation1/mqipt\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Append the following to your ",(0,a.kt)("inlineCode",{parentName:"li"},"~/.bashrc")," file for your MQIPT user")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"MQIPT_PATH=/opt/mqipt/installation1/mqipt\nexport MQIPT_PATH\nexport PATH=$PATH:$MQIPT_PATH/bin\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You can now ",(0,a.kt)("inlineCode",{parentName:"li"},"source")," your .bashrc by issuing the following command")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},". ~/.bashrc\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create MQIPT configuration file")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mkdir /opt/mqipt/installation1/mqipt/configs\ncp /opt/mqipt/installation1/mqipt/samples/mqiptSample.conf /opt/mqipt/installation1/mqipt/configs/mqipt.conf\n")),(0,a.kt)("p",null,"In this instance we are copying the sample configuration file to our MQIPT installation destination."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Modify the ",(0,a.kt)("inlineCode",{parentName:"li"},"mqipt.conf")," file")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[route]\nName=DRHAQM1\nActive=true\nListenerPort=1501\nDestination=<hostname of your load balancer>\nDestinationPort=1501\n\n[route]\nName=DRHAQM2\nActive=true\nListenerPort=1502\nDestination=<hostname of your load balancer>\nDestinationPort=1502\n")),(0,a.kt)("p",null,"In this implementation we are creating two ",(0,a.kt)("inlineCode",{parentName:"p"},"[route]")," entries for the two different regions that correspond to our 2 queues. Recall that we had previously created ",(0,a.kt)("inlineCode",{parentName:"p"},"DRHAQM1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"DRHAQM2")," to be listening on ports ",(0,a.kt)("inlineCode",{parentName:"p"},"1501")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"1502")," respectively. Our loadbalanacer was also configured to forward traffic to these ports."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Start MQIPT")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mqipt /opt/mqipt/installation1/mqipt -n HAMQ\n")),(0,a.kt)("p",null,"You should see the following output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"5724-H72 (C) Copyright IBM Corp. 2000, 2022 All Rights Reserved\nMQCPI001 IBM MQ Internet Pass-Thru 9.2.5.0 starting\nMQCPI004 Reading configuration information from mqipt.conf\nMQCPI152 MQIPT name is DRHAMQ\nMQCPI022 Password checking has been disabled on the command port\nMQCPI144 MQ Advanced capabilities not enabled\nMQCPI011 The path /opt/mqipt/installation1/mqipt/configs/logs will be used to store the log files\nMQCPI006 Route 1502 is starting and will forward messages to :\nMQCPI034 .... ourlb.appdomain.cloud(1502)\nMQCPI035 ....using MQ protocol\nMQCPI078 Route 1502 ready for connection requests\nMQCPI006 Route 1501 is starting and will forward messages to :\nMQCPI034 ....ourlb.appdomain.cloud(1501)\nMQCPI035 ....using MQ protocol\nMQCPI078 Route 1501 ready for connection requests\n")),(0,a.kt)("p",null,"Note that this initial implementation of MQIPT does not account for any mTLS or handshaking. In this mode, it is simply proxying traffic to the MQ servers (through our loadbalancers)."),(0,a.kt)("h4",{id:"enable-mqipt-as-a-system-service"},"Enable MQIPT as a system service"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"This assumes you are running on Red Hat >= 7.x, CentOS >= 7.x, or Ubuntu >= 16.x")),(0,a.kt)("p",null,"Create a new systemd service file called ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/systemd/system/mqipt.service")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[Unit]\nDescription=MQIPT Service for IBM MQ\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nType=exec\nExecStart=/bin/bash -c "/opt/mqipt/installation1/mqipt/bin/mqipt /opt/mqipt/installation1/mqipt/configs -n HAMQ"\nExecStop=/bin/bash -c "/opt/mqipt/installation1/mqipt/bin/mqiptAdmin -stop -n HAMQ"\n\n[Install]\nWantedBy=multi-user.target\n')),(0,a.kt)("p",null,"In the file we created above, we've named our MQIPT instance as ",(0,a.kt)("strong",{parentName:"p"},"HAMQ"),". Logs can be viewed using the ",(0,a.kt)("inlineCode",{parentName:"p"},"systemctl")," command or the ",(0,a.kt)("inlineCode",{parentName:"p"},"journalctl")," command."),(0,a.kt)("p",null,"Refresh systemd with ",(0,a.kt)("inlineCode",{parentName:"p"},"systemctl daemon-reload")),(0,a.kt)("p",null,"Now MQIPT can be enabled to start on boot"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"systemctl enable mqipt\n")),(0,a.kt)("p",null,"This will install the service file for mqipt to ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/init.d")," which can be controlled using the ",(0,a.kt)("inlineCode",{parentName:"p"},"systemctl")," command."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"systemctl start mqipt\n")),(0,a.kt)("p",null,"Make sure to enable this at boot time"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"systemctl enable mqipt\n")),(0,a.kt)("h4",{id:"templating-the-service-file-for-multiple-mqipt-instances"},"Templating the service file for multiple MQIPT instances"),(0,a.kt)("p",null,"MQIPT has the ability to run with multiple instances and to control that with systemd we can simply create a config directory for each instance we want to control and run each with separate systemd templates. For example, we want to create an instance of MQIPT and name it ",(0,a.kt)("inlineCode",{parentName:"p"},"HAMQ"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mkdir /opt/mqipt/installation1/mqipt/HAMQ\n")),(0,a.kt)("p",null,"Move our existing ",(0,a.kt)("inlineCode",{parentName:"p"},"mqipt.conf")," to that directory"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mv /opt/mqipt/installation1/mqipt/configs/mqipt.conf /opt/mqipt/installation1/mqipt/HAMQ\n")),(0,a.kt)("p",null,"Create a systemd service template as ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/systemd/system/mqipt-@.service")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"touch /etc/systemd/system/mqipt-\\@.service\nvi /etc/systemd/system/mqipt-\\@.service\n")),(0,a.kt)("p",null,"Insert the following into the new service file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[Unit]\nDescription=MQIPT Service for IBM MQ %i Instance\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nType=exec\nExecStart=/bin/bash -c "/opt/mqipt/installation1/mqipt/bin/mqipt /opt/mqipt/installation1/mqipt/%i -n %i"\nExecStop=/bin/bash -c "/opt/mqipt/installation1/mqipt/bin/mqiptAdmin -stop -n %i"\nExecReload=/bin/bash -c "/opt/mqipt/installation1/mqipt/bin/mqiptAdmin -refresh -n %i"\n\n[Install]\nWantedBy=multi-user.target\n')),(0,a.kt)("p",null,"Now this service template can be enabled for our ",(0,a.kt)("inlineCode",{parentName:"p"},"HAMQ")," instance with the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"systemctl daemon-reload\nsystemctl enable mqipt-@HAMQ.service\nsystemctl start mqipt-@HAMQ.service\n")),(0,a.kt)("p",null,"Now if we want to run multiple instances of MQIPT that bind to different ports, we can do so with separate instance names that are controllable via systemd by simply creating the instance directory in ",(0,a.kt)("inlineCode",{parentName:"p"},"/opt/mqipt/installation1/mqipt"),", putting a unique ",(0,a.kt)("inlineCode",{parentName:"p"},"mqipt.conf")," in that directory, and then enabling it as a service with systemctl."),(0,a.kt)("p",null,"We can also update our configs and refresh the instance without restarting mqipt with"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"systemctl reload mqipt-@HAMQ.service\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"It's important to note that your instances can't be on the same ports.")),(0,a.kt)("h4",{id:"creating-the-new-queue-manager"},"Creating the new queue manager"),(0,a.kt)("p",null,"Starting with ",(0,a.kt)("inlineCode",{parentName:"p"},"wdc3-mq1")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mqm@wdc3-mq1 ~]$ sudo /opt/mqm/bin/crtmqm -sxs -rr p -rl 10.241.0.4,10.241.64.4,10.241.128.4 -ri 10.240.0.4,10.240.64.4,10.240.128.4 -rp 7005 -fs 3072M SSLDRHAQM1\nCreating replicated data queue manager configuration.\nIBM MQ secondary queue manager created.\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"wdc2-mq1")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@dwdc2-mq1 ~]$ sudo /opt/mqm/bin/crtmqm -sxs -rr p -rl 10.241.0.4,10.241.64.4,10.241.128.4 -ri 10.240.0.4,10.240.64.4,10.240.128.4 -rp 7005 -fs 3072M SSLDRHAQM1\nCreating replicated data queue manager configuration.\nIBM MQ secondary queue manager created.\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"wdc1-mq1")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 ~]$ sudo /opt/mqm/bin/crtmqm -sx -rr p -rl 10.241.0.4,10.241.64.4,10.241.128.4 -ri 10.240.0.4,10.240.64.4,10.240.128.4 -rp 7005 -fs 3072M SSLDRHAQM1\nCreating replicated data queue manager configuration.\nIBM MQ queue manager 'SSLDRHAQM1' created.\nDirectory '/var/mqm/vols/ssldrhaqm1/qmgr/ssldrhaqm1' created.\nThe queue manager is associated with installation 'Installation1'.\nCreating or replacing default objects for queue manager 'SSLDRHAQM1'.\nDefault objects statistics : 83 created. 0 replaced. 0 failed.\nCompleting setup.\nSetup completed.\nEnabling replicated data queue manager.\nReplicated data queue manager enabled.\nIssue the following command on the remote HA group to create the DR/HA\nsecondary queue manager:\ncrtmqm -sx -rr s -rl 10.240.0.4,10.240.64.4,10.240.128.4 -ri 10.241.0.4,10.241.64.4,10.241.128.4 -rp 7005 -fs 3072M SSLDRHAQM1\n")),(0,a.kt)("p",null,"Now wash, rinse, repeat and create the queue with the ",(0,a.kt)("inlineCode",{parentName:"p"},"-rr")," option set as ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," on the DR queue in Dallas:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"dal3-mq1")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@dal3-mq1 ~]$ sudo /opt/mqm/bin/crtmqm -sxs -rr s -ri 10.241.0.4,10.241.64.4,10.241.128.4 -rl 10.240.0.4,10.240.64.4,10.240.128.4 -rp 7005 -fs 3072M SSLDRHAQM1\nCreating replicated data queue manager configuration.\nIBM MQ secondary queue manager created.\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"dal2-mq1")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@dal2-mq1 ~]$ sudo /opt/mqm/bin/crtmqm -sxs -rr s -ri 10.241.0.4,10.241.64.4,10.241.128.4 -rl 10.240.0.4,10.240.64.4,10.240.128.4 -rp 7005 -fs 3072M SSLDRHAQM1\nCreating replicated data queue manager configuration.\nIBM MQ secondary queue manager created.\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"dal1-mq1")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@ceng-dal1-mq1 ~]$ sudo /opt/mqm/bin/crtmqm -sx -rr s -ri 10.241.0.4,10.241.64.4,10.241.128.4 -rl 10.240.0.4,10.240.64.4,10.240.128.4 -rp 7005 -fs 3072M SSLDRHAQM1\nCreating replicated data queue manager configuration.\nIBM MQ secondary queue manager created.\nEnabling replicated data queue manager.\nReplicated data queue manager enabled.\n")),(0,a.kt)("p",null,"Now we should see a happy replicated queue"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[root@wdc1-mq1 ~]# rdqmstatus -m SSLDRHAQM1\nNode:                                   wdc1-mq1\nQueue manager status:                   Running\nCPU:                                    0.00%\nMemory:                                 182MB\nQueue manager file system:              58MB used, 2.9GB allocated [2%]\nHA role:                                Primary\nHA status:                              Normal\nHA control:                             Enabled\nHA current location:                    This node\nHA preferred location:                  This node\nHA blocked location:                    None\nHA floating IP interface:               None\nHA floating IP address:                 None\nDR role:                                Primary\nDR status:                              Normal\nDR port:                                7005\nDR local IP address:                    10.241.0.4\nDR remote IP address list:              10.240.0.4,10.240.64.4,10.240.128.4\nDR current remote IP address:           10.240.0.4\n\nNode:                                   wdc2-mq1\nHA status:                              Normal\n\nNode:                                   wdc3-mq1\nHA status:                              Normal\n")),(0,a.kt)("p",null,"Let's create the queue. From the primary node, log into the queue manager and create the channel and the queue and the listener at port 1503:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 ~]$ runmqsc SSLDRHAQM1\n\nDEFINE CHANNEL(SSLDRHAQM1.MQIPT) CHLTYPE(SVRCONN)\nDEFINE QLOCAL(MQIPT.LOCAL.QUEUE)\nDEFINE listener(LISTENER) trptype(tcp) control(qmgr) port(1503)\nstart listener(LISTENER)\n")),(0,a.kt)("h4",{id:"configuring-ssl-in-queue-manager-and-client"},"Configuring SSL in Queue Manager and client"),(0,a.kt)("p",null,"Firstly, let's verify where our SSL key directory is in the queue manager"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mqm@wdc1-mq1 ~]$ runmqsc -u mqadmin SSLDRHAQM1\n5724-H72 (C) Copyright IBM Corp. 1994, 2021.\nEnter password:\n*******\nStarting MQSC for queue manager SSLDRHAQM1.\n\nDISPLAY QMGR SSLKEYR\n    15 : DISPLAY QMGR SSLKEYR\nAMQ8408I: Display Queue Manager details.\n   QMNAME(DRHAQM1)\n   SSLKEYR(/var/mqm/vols/ssldrhaqm1/qmgr/ssldrhaqm1/ssl/key)\n\n")),(0,a.kt)("p",null,"This is the default entry for the queue manager. So initially, we want to create a keyfile db. This is going to live at the path we found above. This is important since our example queue manager is replicated via RDMQ so it this keyfile needs to be on the replicated volume."),(0,a.kt)("p",null,"So first, let's create a key repo on the MQ primary node:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mqm@wdc1-mq1 ~]$ runmqakm -keydb -create -db /var/mqm/vols/ssldrhaqm1/qmgr/ssldrhaqm1/ssl/ssldrhaqm1KeyFile -pw 'p@ssw0rd' -type cms -stash\n")),(0,a.kt)("p",null,"This should create the following files:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"ssldrhaqm1KeyFile.crl\nssldrhaqm1KeyFile.kdb\nssldrhaqm1KeyFile.rdb\nssldrhaqm1KeyFile.sth\n")),(0,a.kt)("p",null,"Very important! Make sure the directory and file permissions are correct for the generated key db! The file should be owned by the user running that queue. Ig ",(0,a.kt)("inlineCode",{parentName:"p"},"mqm")," as an example. Also important to remember, while you'll reference the keyfile like ",(0,a.kt)("inlineCode",{parentName:"p"},"/var/mqm/vols/ssldrhaqm1/qmgr/ssldrhaqm1/ssl/ssldrhaqm1KeyFile")," in the queue manager settings, the file itself ",(0,a.kt)("strong",{parentName:"p"},"must")," have the ",(0,a.kt)("inlineCode",{parentName:"p"},".kdb")," suffix."),(0,a.kt)("p",null,"Now we can populate the keyfile with the default CA signers with the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mqm@wdc1-mq1 ~]$ runmqckm -cert -populate -db /var/mqm/vols/ssldrhaqm1/qmgr/ssldrhaqm1/ssl/ssldrhaqm1KeyFile.kdb -stashed -label entrust\nmqm@wdc1-mq1 ~]$ runmqckm -cert -populate -db /var/mqm/vols/ssldrhaqm1/qmgr/ssldrhaqm1/ssl/ssldrhaqm1KeyFile.kdb -stashed -label thawte\nmqm@wdc1-mq1 ~]$ runmqckm -cert -populate -db /var/mqm/vols/ssldrhaqm1/qmgr/ssldrhaqm1/ssl/ssldrhaqm1KeyFile.kdb -stashed -label verisign\n")),(0,a.kt)("p",null,"Should be able to verify that with"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'mqm@wdc1-mq1 ~]$ runmqckm -cert -list -db /var/mqm/vols/ssldrhaqm1/qmgr/ssldrhaqm1/ssl/ssldrhaqm1KeyFile.kdb -stashed\n\nCertificates found\n* default, - personal, ! trusted, # secret key\n!   "Entrust.net Certification Authority (2048) 29"\n!   "Entrust Root Certification Authority - EC1"\n!   "Entrust Root Certification Authority - EV"\n!   "Entrust Root Certification Authority - G2"\n!   "Thawte Personal Basic CA"\n!   "Thawte Personal Freemail CA"\n!   "Thawte Personal Premium CA"\n!   "Thawte Premium Server CA"\n!   "Thawte Server CA"\n!   "Thawte Primary Root CA - G2 ECC"\n!   "Thawte Primary Root CA"\n!   "VeriSign Class 1 Public Primary Certification Authority"\n!   "VeriSign Class 1 Public Primary Certification Authority - G2"\n!   "VeriSign Class 1 Public Primary Certification Authority - G3"\n!   "VeriSign Class 2 Public Primary Certification Authority"\n!   "VeriSign Class 2 Public Primary Certification Authority - G2"\n!   "VeriSign Class 2 Public Primary Certification Authority - G3"\n!   "VeriSign Class 3 Public Primary Certification Authority"\n!   "VeriSign Class 3 Public Primary Certification Authority - G2"\n!   "VeriSign Class 3 Public Primary Certification Authority - G3"\n!   "VeriSign Class 3 Public Primary Certification Authority - G5"\n!   "VeriSign Class 4 Public Primary Certification Authority - G2"\n!   "VeriSign Class 4 Public Primary Certification Authority - G3"\n')),(0,a.kt)("p",null,"So now we've populated the keystore with the default CA signers. Let's generate our own self-signed certificate:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'mqm@wdc1-mq1 ~]$ runmqakm -cert -create \\\n-db /var/mqm/vols/ssldrhaqm1/qmgr/ssldrhaqm1/ssl/ssldrhaqm1KeyFile.kdb \\\n-stashed \\\n-label ssldrhaqm1certlabel \\\n-dn "cn=SSLDRHAQM1,O=IBM,C=US,OU=SSL For MQ,ST=MA" \\\n-size 2048 \\\n-x509version 3 \\\n-expire 7300 \\\n-sig_alg SHA256WithRSA \\\n-type cms\n')),(0,a.kt)("p",null,"So breaking down the above command:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-db")," - points to our key database"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-pw")," - is our password for that key database"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-stashed")," - when we created our keystore we created a .sth file that contains the password encrypted. This allows us to pass the ",(0,a.kt)("inlineCode",{parentName:"li"},"-stashed")," argument."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-label")," - We're gonna label this with our queue manager name"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-dn")," - This is our distinguished name. We're leading off with the name of the queue manager."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-size")," - we're setting this to 2048"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-x509version")," - Setting this to 3. This is the default anyway."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-expire")," - Don't want this cert to expire for 7300 days which is the maximum supported by this command."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-sig_alg")," -  We are going with ",(0,a.kt)("inlineCode",{parentName:"li"},"SHA256WithRSA")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-type")," - We're going with cms since that's the keystore type")),(0,a.kt)("p",null,"We can verify the certificate creation with"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mqm@wdc1-mq1 ~]$ runmqckm -cert -list -db /var/mqm/vols/ssldrhaqm1/qmgr/ssldrhaqm1/ssl/ssldrhaqm1KeyFile.kdb -stashed | grep ssldrhaqm1certlabel\n\n-   ssldrhaqm1certlabel\n")),(0,a.kt)("p",null,"The dash indicates that this cert label is a personal certificate."),(0,a.kt)("p",null,"Now we need to point the queue manager to use our new keystore"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 ~]$ runmqsc -u mqadmin SSLDRHAQM1\n5724-H72 (C) Copyright IBM Corp. 1994, 2021.\nEnter password:\n*******\nStarting MQSC for queue manager SSLDRHAQM1.\n\nALTER QMGR SSLKEYR('/var/mqm/vols/ssldrhaqm1/qmgr/ssldrhaqm1/ssl/ssldrhaqm1KeyFile')\nALTER QMGR CERTLABL('ssldrhaqm1certlabel')\nREFRESH SECURITY\nREFRESH QMGR TYPE(CONFIGEV) OBJECT(AUTHREC)\n")),(0,a.kt)("p",null,"It's important to note that even though the keyfile is ",(0,a.kt)("inlineCode",{parentName:"p"},"ssldrhaqm1KeyFile.kdb")," it must be referenced in MQ without the ",(0,a.kt)("inlineCode",{parentName:"p"},".kdb")," suffix."),(0,a.kt)("h4",{id:"setting-the-channel-auth-for-ssl"},"Setting the channel auth for SSL"),(0,a.kt)("p",null,"Let's set our channel authentication"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"set CHLAUTH(SSLDRHAQM1.MQIPT) TYPE(USERMAP) CLNTUSER('mqadmin') USERSRC(MAP) MCAUSER('mqadmin') ACTION(REPLACE)\nalter channel(SSLDRHAQM1.MQIPT) CHLTYPE(SVRCONN) MCAUSER('mqadmin') CERTLABL('ssldrhaqm1certlabel') SSLCAUTH(REQUIRED) SSLCIPH(ANY) TRPTYPE(TCP)\nREFRESH SECURITY\nREFRESH QMGR TYPE(CONFIGEV) OBJECT(AUTHREC)\nREFRESH SECURITY TYPE(CONNAUTH)\nREFRESH SECURITY TYPE(SSL)\nREFRESH SECURITY TYPE(AUTHSERV)\n")),(0,a.kt)("p",null,"We'll set this so the mqadmin user can authenticate in"),(0,a.kt)("p",null,"Let's configure MQIPT for SSLProxy"),(0,a.kt)("p",null,"On our MQIPT host, edit the ",(0,a.kt)("inlineCode",{parentName:"p"},"/opt/mqipt/installation1/mqipt/HAMQ/mqipt.conf")," file and add the route entry."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[route]\nName=SSLDRHAQM1\nActive=true\nListenerPort=1503\nDestination=3bdf30c3-us-east.lb.appdomain.cloud\nDestinationPort=1503\nSSLProxyMode=true\n")),(0,a.kt)("p",null,"Reload the mqipt config for this instance"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"systemctl reload mqipt-@HAMQ.service\n")),(0,a.kt)("p",null,"Now let's create a client self-signed certificate. Over on our client now:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[kramerro@wdc-mq-client keys]$ mkdir ~/keys\n[kramerro@wdc-mq-client keys]$ cd ~/keys\n[kramerro@wdc-mq-client keys]$ /opt/mqm/bin/runmqakm -keydb -create -db mq_cloud_keys -pw 'p@ssw0rd' -type cms -stash\n")),(0,a.kt)("p",null,"Create a personal cert on the client"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[kramerro@wdc-mq-client keys]$ /opt/mqm/bin/runmqakm -cert -create \\\n-db /home/kramerro/keys/mq_cloud_keys \\\n-pw 'p@ssw0rd' \\\n-label personalcertlabel \\\n-dn \"cn=kramerro,O=IBM,C=US,OU=SSL For MQ,ST=MA\" \\\n-size 2048 \\\n-x509version 3 \\\n-expire 7300 \\\n-sig_alg SHA256WithRSA \\\n-type kdb\n")),(0,a.kt)("p",null,"This keyfile ",(0,a.kt)("strong",{parentName:"p"},"MUST also have a ",(0,a.kt)("inlineCode",{parentName:"strong"},".kdb")," suffix but not referenced with it.")),(0,a.kt)("p",null,"You can verify the new cert with this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[kramerro@wdc-mq-client keys]$ /opt/mqm/bin/runmqakm -cert -list -db /home/kramerro/keys/mq_cloud_keys.kdb -pw 'p@ssw0rd'\n\nCertificates found\n* default, - personal, ! trusted, # secret key\n-   personalcertlabel\n")),(0,a.kt)("p",null,"On the MQ Server host, extract the personal certificate from the server key repository and add it to the client repository."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 ssl]$ runmqakm -cert -extract -db /var/mqm/vols/ssldrhaqm1/qmgr/ssldrhaqm1/ssl/defaultSSLKeyFile.kdb -pw 'p@ssw0rd' -label ssldrhaqm1certlabel -target ssldrhaqm1certlabel_pubkey.txt\n")),(0,a.kt)("p",null,"This should create file called ",(0,a.kt)("inlineCode",{parentName:"p"},"ssldrhaqm1certlabel_pubkey.txt")," in your current directory. Copy this down to your client."),(0,a.kt)("p",null,"Now add the pub cert from the server to your new client key db:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[kramerro@mq-client keys]$ /opt/mqm/bin/runmqakm -cert -add -db /home/kramerro/keys/mq_cloud_keys -pw 'p@ssw0rd' -label ssldrhaqm1certlabel -file ssldrhaqm1certlabel_pubkey.txt -format ascii\n")),(0,a.kt)("p",null,"Now we will repeat this but reversed. We are going to extract our client certificate from our client keystore and copy it over to our primary MQ node."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[kramerro@mq-client keys]$ /opt/mqm/bin/runmqakm -cert -extract -db /Users/kramerro/keys/mq_cloud_keys -pw 'p@ssw0rd' -label personalcertlabel -target personalcertlabel_pubkey.txt\n")),(0,a.kt)("p",null,"Copy that up to the mq host and import it into the server side key store"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 ssl]$ /opt/mqm/bin/runmqakm -cert -add -db /var/mqm/vols/ssldrhaqm1/qmgr/ssldrhaqm1/ssl/defaultSSLKeyFile.kdb -pw 'p@ssw0rd' -label personalcertlabel -file personalcertlabel_pubkey.txt -format ascii\n")),(0,a.kt)("p",null,"Refresh security on the mq host:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 ~]$ runmqsc -u mqadmin SSLDRHAQM1\n5724-H72 (C) Copyright IBM Corp. 1994, 2021.\nEnter password:\n*******\nStarting MQSC for queue manager SSLDRHAQM1.\n\nREFRESH QMGR TYPE(CONFIGEV) OBJECT(AUTHREC)\nREFRESH SECURITY TYPE(CONNAUTH)\nREFRESH SECURITY TYPE(SSL)\nREFRESH SECURITY TYPE(AUTHSERV)\n")),(0,a.kt)("p",null,"Now run this command on the client to verify SSL"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[kramerro@mq-client keys]$ /opt/mqm/samp/bin/amqssslc -m SSLDRHAQM1 -c SSLDRHAQM1.MQIPT -x "52.116.121.144(1501)" -k /home/kramerro/keys/mq_cloud_keys -l personalcertlabel -s TLS_RSA_WITH_AES_256_GCM_SHA384\n')),(0,a.kt)("p",null,"If everything was done right, you should see this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Sample AMQSSSLC start\nConnecting to queue manager SSLDRHAQM1\nUsing the server connection channel SSLDRHAQM1.MQIPT\non connection name 52.116.121.144(1501).\nUsing SSL CipherSpec TLS_RSA_WITH_AES_128_CBC_SHA256\nUsing SSL key repository stem /home/kramerro/keys/mq_cloud_keys\nCertificate Label: personalcertlabel\nNo OCSP configuration specified.\nConnection established to queue manager SSLDRHAQM1\nSample AMQSSSLC end\n")),(0,a.kt)("h3",{id:"configuring-mq-ipt-for-sslserverclient"},"Configuring MQ-IPT for SSLServer/Client"),(0,a.kt)("p",null,"On the MQ-IPT server, let's first create a couple of keystores. These will be labeled for client and server. It's important to note that in this context, mqipt is acting as the SSL server for incoming client connections and it is acting as an SSL client for outgoing to the MQ nodes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mqiptKeycmd -keydb -create -db /opt/mqipt/installation1/mqipt/HAMQ/keys/mq-ipt-client.pfx -pw 'p@ssw0rd' -type pkcs12 -stash\n\nmqiptKeycmd -keydb -create -db /opt/mqipt/installation1/mqipt/HAMQ/keys/mq-ipt-server.pfx -pw 'p@ssw0rd' -type pkcs12 -stash\n")),(0,a.kt)("p",null,"Now let's create a self-signed cert to install into both keystores"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'mqiptKeycmd -cert -create -db /opt/mqipt/installation1/mqipt/HAMQ/keys/mq-ipt-server.pfx -stashed -type pkcs12 -label mqiptserver -dn "CN=mqipt-server, OU=IBM, C=US" -sig_alg SHA256WithRSA -size 2048\n\nmqiptKeycmd -cert -create -db /opt/mqipt/installation1/mqipt/HAMQ/keys/mq-ipt-client.pfx -stashed -type pkcs12 -label mqiptclient -dn "CN=mqipt-client, OU=IBM, C=US" -sig_alg SHA256WithRSA -size 2048\n')),(0,a.kt)("p",null,"Extract the key from the SSL client keystore on mqipt host and copy that up to the mq host and import it into the keystore there:"),(0,a.kt)("p",null,"MQIPT host"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"root@wdc-bastion:/opt/mqipt/installation1/mqipt/HAMQ/keys# mqiptKeycmd -cert -extract -db /opt/mqipt/installation1/mqipt/HAMQ/keys/mq-ipt-client.pfx -label mqiptclient -stashed -format ascii -type pkcs12 -target /opt/mqipt/installation1/mqipt/HAMQ/keys/mqiptclient_public.pem\n")),(0,a.kt)("p",null,"Primary cluster node"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 ssl]$ /opt/mqm/bin/runmqakm -cert -add -db /var/mqm/vols/ssldrhaqm1/qmgr/ssldrhaqm1/ssl/defaultSSLKeyFile.kdb -pw 'p@ssw0rd' -label mqiptclient -file mqiptclient_public.pem -format ascii\n")),(0,a.kt)("p",null,"Refresh security for that queue manager on the primary cluster node"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 ~]$ runmqsc SSLDRHAQM1\n\nREFRESH QMGR TYPE(CONFIGEV) OBJECT(AUTHREC)\nREFRESH SECURITY TYPE(CONNAUTH)\nREFRESH SECURITY TYPE(SSL)\nREFRESH SECURITY TYPE(AUTHSERV)\n")),(0,a.kt)("p",null,"Now extract the public cert for the SSL server from the keystore on mqipt host:"),(0,a.kt)("p",null,"MQIPT host"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"root@wdc-bastion:/opt/mqipt/installation1/mqipt/HAMQ/keys# mqiptKeycmd -cert -extract -db /opt/mqipt/installation1/mqipt/HAMQ/keys/mq-ipt-server.pfx -label mqiptserver -stashed -format ascii -type pkcs12 -target /opt/mqipt/installation1/mqipt/HAMQ/keys/mqiptserver_public.pem -format ascii\n")),(0,a.kt)("p",null,"Install it in our client so we trust it"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[kramerro@wdc-mq-client keys]$ /opt/mqm/bin/runmqakm -cert -add -db /home/kramerro/keys/mq_cloud_keys -pw 'p@ssw0rd' -label mqiptserver -file mqiptserver_public.pem -format ascii\n")),(0,a.kt)("p",null,"Now lets generate a new personal cert on our client machine and import it into mq-ipt's keystore"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[kramerro@wdc-mq-client keys]$ runmqakm -cert -create -db mq_cloud_keys -stashed -label wdc-mq-client -dn "CN=wdc-mq-client, OU=IBM, C=US" -sig_alg SHA256WithRSA -size 2048\n')),(0,a.kt)("p",null,"Extract it on the client and import the public cert into mqipt"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[kramerro@wdc-mq-client keys]$ runmqakm -cert -extract -db mq_cloud_keys -pw 'p@ssw0rd' -label wdc-mq-client -target wdc-mq-client_public.txt\n")),(0,a.kt)("p",null,"Import it into MQIPT's SSL server keystore"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"root@wdc-bastion:/opt/mqipt/installation1/mqipt/HAMQ/keys# mqiptKeycmd -cert -add -db mq-ipt-server.pfx -stashed -label wdc-mq-client -file wdc-mq-client_public.txt -format ascii -type pkcs12\n")),(0,a.kt)("p",null,"Encrypt the keystore password so we can put it into the mqipt.conf file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"root@wdc-bastion:/opt/mqipt/installation1/mqipt/HAMQ/keys# mqiptPW p@ssw0rd mq-ipt-pw.key\n")),(0,a.kt)("p",null,"This is a deprecated use for mqiptPW but we're gonna roll with it. Make sure the mq-ipt-pw.key file is in the same directory we have our mqipt instance running out of. Probably safer to keep it in the keys directory."),(0,a.kt)("p",null,"Modify the mqipt.conf file. Our file is stored in our instance directory ",(0,a.kt)("inlineCode",{parentName:"p"},"/opt/mqipt/installation1/mqipt/HAMQ/mqipt.conf")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[route]\nName=SSLDRHAQM1\nActive=true\nListenerPort=1503\nDestination=3bdf30c3-us-east.lb.appdomain.cloud\nDestinationPort=1503\nSSLServer=true\nSSLServerSiteLabel=mqiptserver\nSSLServerAskClientAuth=true\nSSLServerKeyRing=/opt/mqipt/installation1/mqipt/HAMQ/keys/mq-ipt-server.pfx\nSSLServerKeyRingPW=/opt/mqipt/installation1/mqipt/HAMQ/keys/mq-ipt-pw.key\nSSLServerCipherSuites=SSL_RSA_WITH_AES_256_GCM_SHA384\nSSLClient=true\nSSLClientSiteLabel=mqiptclient\nSSLClientKeyRing=/opt/mqipt/installation1/mqipt/HAMQ/keys/mq-ipt-client.pfx\nSSLClientKeyRingPW=/opt/mqipt/installation1/mqipt/HAMQ/keys/mq-ipt-pw.key\nSSLClientCipherSuites=SSL_RSA_WITH_AES_256_GCM_SHA384\nTrace=0\n")),(0,a.kt)("p",null,"Now reload MQ-IPT"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"systemctl reload mqipt-@HAMQ.service\n")),(0,a.kt)("p",null,"Verify the connection from the client"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[kramerro@wdc-mq-client keys]$ /opt/mqm/samp/bin/amqssslc -m SSLDRHAQM1 -c SSLDRHAMQ1.MQIPT -x "52.116.121.144(1503)" -k /home/kramerro/keys/mq_cloud_keys -l wdc-mq-client -s TLS_RSA_WITH_AES_256_GCM_SHA384\n\nSample AMQSSSLC start\nConnecting to queue manager SSLDRHAQM1\nUsing the server connection channel SSLDRHAMQ1.MQIPT\non connection name 52.116.121.144(1503).\nUsing SSL CipherSpec TLS_RSA_WITH_AES_256_GCM_SHA384\nUsing SSL key repository stem /home/kramerro/keys/mq_cloud_keys\nCertificate Label: wdc-mq-client\nNo OCSP configuration specified.\nConnection established to queue manager SSLDRHAQM1\nSample AMQSSSLC end\n')),(0,a.kt)("h3",{id:"mq-to-mq-and-ssl-encryption"},"MQ to MQ and SSL encryption"),(0,a.kt)("p",null,"For the purposes of testing, we'll initially create an unencrypted connection between queues on two different MQ hosts. These are not replicated or in any sort of failover but are designed to illustrate messages being forwarded from one queue to another."),(0,a.kt)("p",null,"Create a queue manager and start it up"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc-mq-client ~]$ crtmqm QM1 && strmqm QM1\nIBM MQ queue manager 'QM1' created.\nDirectory '/var/mqm/qmgrs/QM1' created.\nThe queue manager is associated with installation 'Installation1'.\nCreating or replacing default objects for queue manager 'QM1'.\nDefault objects statistics : 83 created. 0 replaced. 0 failed.\nCompleting setup.\nSetup completed.\nThe system resource RLIMIT_NOFILE is set at an unusually low level for IBM MQ.\nIBM MQ queue manager 'QM1' starting.\nThe queue manager is associated with installation 'Installation1'.\n6 log records accessed on queue manager 'QM1' during the log replay phase.\nLog replay for queue manager 'QM1' complete.\nTransaction manager state recovered for queue manager 'QM1'.\nPlain text communication is enabled.\nIBM MQ queue manager 'QM1' started using V9.2.5.0.\n")),(0,a.kt)("p",null,"Create a transmission queue on QM1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc-mq-client ~]$ runmqsc QM1\n5724-H72 (C) Copyright IBM Corp. 1994, 2022.\nStarting MQSC for queue manager QM1.\n\n\ndefine qlocal(QM2) DESCR('Transmission queue to QM2') USAGE(XMITQ)\n     1 : define qlocal(QM2) DESCR('Transmission queue to QM2') USAGE(XMITQ)\nAMQ8006I: IBM MQ queue created.\n")),(0,a.kt)("p",null,"Create a remote receiver queue on QM1 to represent the remote queue that will live on QM2 on the remote host"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"define qremote(QUEUE.ON.QM2) DESCR('Remote queue for QM2') XMITQ(QM2) RNAME(RECEIVEQUEUE) RQMNAME(QM2)\n     1 : define qremote(QUEUE.ON.QM2) DESCR('Remote queue for QM2') XMITQ(QM2) RNAME(RECEIVEQUEUE) RQMNAME(QM2)\nAMQ8006I: IBM MQ queue created.\n")),(0,a.kt)("p",null,"Create the sender channel on QM1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"define channel(QM1.TO.QM2) CHLTYPE(SDR) CONNAME('10.241.0.4') TRPTYPE(TCP) XMITQ(QM2)\n     1 : define channel(QM1.TO.QM2) CHLTYPE(SDR) CONNAME('10.241.0.4') TRPTYPE(TCP) XMITQ(QM2)\nAMQ8014I: IBM MQ channel created.\n")),(0,a.kt)("p",null,"Start up the sender channel on QM1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"START CHANNEL(QM1.TO.QM2)\n")),(0,a.kt)("p",null,"On our remote host, (wdc1-mq1), create a single queue"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 ssl]$ crtmqm QM2 && strmqm QM2\nIBM MQ queue manager 'QM2' created.\nDirectory '/var/mqm/qmgrs/QM2' created.\nThe queue manager is associated with installation 'Installation1'.\nCreating or replacing default objects for queue manager 'QM2'.\nDefault objects statistics : 83 created. 0 replaced. 0 failed.\nCompleting setup.\nSetup completed.\nIBM MQ queue manager 'QM2' starting.\nThe queue manager is associated with installation 'Installation1'.\n6 log records accessed on queue manager 'QM2' during the log replay phase.\nLog replay for queue manager 'QM2' complete.\nTransaction manager state recovered for queue manager 'QM2'.\nPlain text communication is enabled.\nIBM MQ queue manager 'QM2' started using V9.2.5.0.\n")),(0,a.kt)("p",null,"Create the receiver queue on the remote host (wdc1-mq1)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"DEFINE QLOCAL(RECEIVEQUEUE) DESCR('Receiving queue')\n")),(0,a.kt)("p",null,"Create a listener on the remote host (wdc1-mq1) called LISTENER1. In the MQSC interface, type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"DEFINE LISTENER(LISTENER1) TRPTYPE(TCP) PORT(1414) CONTROL(QMGR)\nSTART LISTENER(LISTENER1)\n")),(0,a.kt)("p",null,"Port 1414 is the default. If we want to use anything different, we'll need to update the sender channel on QM1."),(0,a.kt)("p",null,"Create a receiver channel on the remote host (wdc1-mq1) called QM1.TO.QM2. The channel must have the same name as the sender channel on the source queue manager."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 ~]$ runmqsc QM2\n5724-H72 (C) Copyright IBM Corp. 1994, 2022.\nStarting MQSC for queue manager QM2.\n\nDEFINE CHANNEL(QM1.TO.QM2) CHLTYPE(RCVR) TRPTYPE(TCP)\n     4 : DEFINE CHANNEL(QM1.TO.QM2) CHLTYPE(RCVR) TRPTYPE(TCP)\nAMQ8014I: IBM MQ channel created.\n")),(0,a.kt)("p",null,"Now start up the channel on the remote"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"START CHANNEL(QM1.TO.QM2)\n")),(0,a.kt)("p",null,"Back on the local mq host (wdc-mq-client), let's test the connection with the included sample programs. Hit enter twice to exit"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc-mq-client ~]$ /opt/mqm/samp/bin/amqsput QUEUE.ON.QM2 QM1\nSample AMQSPUT0 start\ntarget queue is QUEUE.ON.QM2\nthis is a test\ntesting\nanother message\n\n")),(0,a.kt)("p",null,"On the remote host, run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 ssl]$ amqsget RECEIVEQUEUE QM2\nSample AMQSGET0 start\nmessage <this is a test>\nmessage <testing>\nmessage <another message>\nno more messages\nSample AMQSGET0 end\n")),(0,a.kt)("p",null,"We've now verified that the queues are able to send and receive."),(0,a.kt)("h3",{id:"connecting-two-queue-managers-via-ssltls-and-self-signed-certs"},"Connecting two queue managers via SSL/TLS and self-signed certs"),(0,a.kt)("p",null,"Create a keystore on the local host (wdc-mq-client)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc-mq-client ssl]$ runmqakm -keydb -create -db /var/mqm/qmgrs/QM1/ssl/key.kdb -type cms -pw 'p@ssw0rd' -stash\n")),(0,a.kt)("p",null,"Create a keystore on the remote host (wdc1-mq1)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 ssl]$ runmqakm -keydb -create -db /var/mqm/qmgrs/QM2/ssl/key.kdb -type cms -pw 'p@ssw0rd' -stash\n")),(0,a.kt)("p",null,"Create a self-signed cert on the local host (wdc-mq-client). For production envs, this should be an actual signed cert."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[mqm@wdc-mq-client ssl]$ runmqakm -cert -create -db /var/mqm/qmgrs/QM1/ssl/key.kdb -stashed -label QM1 -dn "cn=QM1,O=IBM,C=US,OU=SSL For MQ,ST=MA" -size 2048 -x509version 3 -expire 7300 -sig_alg SHA256WithRSA\n')),(0,a.kt)("p",null,"Create a self-signed cert on the remote host (wdc1-mq1). For production envs, this should be an actual signed cert."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[mqm@wdc1-mq1 ssl]$ runmqakm -cert -create -db /var/mqm/qmgrs/QM2/ssl/key.kdb -stashed -label QM2 -dn "cn=QM2,O=IBM,C=US,OU=SSL For MQ,ST=MA" -size 2048 -x509version 3 -expire 7300 -sig_alg SHA256WithRSA\n')),(0,a.kt)("p",null,"Extract the public cert from the local host (wdc-mq-client)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc-mq-client ssl]$ runmqakm -cert -extract -db /var/mqm/qmgrs/QM1/ssl/key.kdb -stashed -label QM1 -target QM1_public.txt\n")),(0,a.kt)("p",null,"Extract the public cert from the remote host (wdc1-mq1)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 ssl]$ runmqakm -cert -extract -db /var/mqm/qmgrs/QM2/ssl/key.kdb -stashed -label QM2 -target QM2_public.txt\n")),(0,a.kt)("p",null,"Copy the QM1_public.txt to the remote MQ (wdc1-mq1) host and import it into the keystore"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 ssl]$ runmqakm -cert -add -db /var/mqm/qmgrs/QM2/ssl/key.kdb -stashed -label QM1 -file QM1_public.txt\n")),(0,a.kt)("p",null,"Copy the QM2_public.txt to the local host (wdc-mq-client) and import it into the keystore"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc-mq-client ssl]$ runmqakm -cert -add -db /var/mqm/qmgrs/QM1/ssl/key.kdb -stashed -label QM2 -file QM2_public.txt\n")),(0,a.kt)("p",null,"On the local host (wdc-mq-client) update the sender channel to use SSL, then refresh and make sure the channel is started"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc-mq-client ssl]$ runmqsc QM1\n\n5724-H72 (C) Copyright IBM Corp. 1994, 2022.\nStarting MQSC for queue manager QM1.\n\nalter channel(QM1.TO.QM2) CHLTYPE(SDR) TRPTYPE(TCP) SSLCIPH('TLS_RSA_WITH_AES_128_CBC_SHA256') DESCR('Sender channel using TLS from QM1 to QM2')\n     5 : alter channel(QM1.TO.QM2) CHLTYPE(SDR) TRPTYPE(TCP) SSLCIPH('TLS_RSA_WITH_AES_128_CBC_SHA256') DESCR('Sender channel using TLS from QM1 to QM2')\nAMQ8016I: IBM MQ channel changed.\n\nrefresh qmgr type(configev) object(channel)\nstart channel(QM1.TO.QM2)\n\n")),(0,a.kt)("p",null,"On the remote host (wdc1-mq1) update the reciever channel to use SSL"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 ssl]$ runmqsc QM2\n5724-H72 (C) Copyright IBM Corp. 1994, 2022.\nStarting MQSC for queue manager QM2.\n\n\nalter channel(QM1.TO.QM2) CHLTYPE(RCVR) TRPTYPE(TCP) SSLCIPH('TLS_RSA_WITH_AES_128_CBC_SHA256') SSLCAUTH(REQUIRED) DESCR('Receiver channel using TLS from QM1 to QM2') CERTLABL('QM2')\n     2 : alter channel(QM1.TO.QM2) CHLTYPE(RCVR) TRPTYPE(TCP) SSLCIPH('TLS_RSA_WITH_AES_128_CBC_SHA256') SSLCAUTH(REQUIRED) DESCR('Receiver channel using TLS from QM1 to QM2')\nAMQ8016I: IBM MQ channel changed.\n\nrefresh qmgr type(configev) object(channel)\nstart channel(QM1.TO.QM2)\n")),(0,a.kt)("p",null,"Alter the QMGR on the remote host (wdc1-mq1) to point to the correct cert label we created"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 ssl]$ runmqsc QM2\n5724-H72 (C) Copyright IBM Corp. 1994, 2022.\nStarting MQSC for queue manager QM2.\n\nalter qmgr certlabl('QM2')\nrefresh qmgr type(configev) object(all)\n")),(0,a.kt)("p",null,"Alter the QMGR on the local host (wdc1-mq1) to point to the correct cert label we created"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc-mq-client ssl]$ runmqsc QM1\n5724-H72 (C) Copyright IBM Corp. 1994, 2022.\nStarting MQSC for queue manager QM2.\n\nalter qmgr certlabl('QM1')\nrefresh qmgr type(configev) object(all)\n")),(0,a.kt)("p",null,"Back on the local, let's test the connection with the included sample programs. Hit enter twice to exit"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc-mq-client ~]$ /opt/mqm/samp/bin/amqsput QUEUE.ON.QM2 QM1\nSample AMQSPUT0 start\ntarget queue is QUEUE.ON.QM2\nthis is a test\ntesting\nanother message\n")),(0,a.kt)("p",null,"On the remote host, run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 ssl]$ amqsget RECEIVEQUEUE QM2\nSample AMQSGET0 start\nmessage <Sample AMQSPUT0 start>\nmessage <target queue is QUEUE.ON.QM2>\nmessage <this is a test>\nmessage <testing>\nmessage <another message>\nno more messages\nSample AMQSGET0 end\n")),(0,a.kt)("p",null,"We've now verified that messages are being forwarded between queues via a TLS connection. Let's check our peering on local queue"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc-mq-client ssl]$ runmqsc QM1\n\nDISPLAY CHS(QM1.TO.QM2) SSLPEER SSLCERTI\n\n    10 : DISPLAY CHS(QM1.TO.QM2) SSLPEER SSLCERTI\nAMQ8417I: Display Channel Status details.\n   CHANNEL(QM1.TO.QM2)                     CHLTYPE(SDR)\n   CONNAME(10.241.0.4(1414))               CURRENT\n   RQMNAME(QM2)\n   SSLCERTI(CN=QM2,OU=SSL For MQ,O=IBM,ST=MA,C=US)\n   SSLPEER(SERIALNUMBER=5E:C8:76:52:DA:81:96:5B,CN=QM2,OU=SSL For MQ,O=IBM,ST=MA,C=US)\n   STATUS(RUNNING)                         SUBSTATE(MQGET)\n   XMITQ(QM2)\n")),(0,a.kt)("p",null,"Check our peering on the remote queue"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 errors]$ runmqsc QM2\n5724-H72 (C) Copyright IBM Corp. 1994, 2022.\nStarting MQSC for queue manager QM2.\n\n\nDISPLAY CHS(QM1.TO.QM2) SSLPEER SSLCERTI\n     1 : DISPLAY CHS(QM1.TO.QM2) SSLPEER SSLCERTI\nAMQ8417I: Display Channel Status details.\n   CHANNEL(QM1.TO.QM2)                     CHLTYPE(RCVR)\n   CONNAME(10.241.2.5)                     CURRENT\n   RQMNAME(QM1)\n   SSLCERTI(CN=QM1,OU=SSL For MQ,O=IBM,ST=MA,C=US)\n   SSLPEER(SERIALNUMBER=78:40:26:54:E5:D4:80:E4,CN=QM1,OU=SSL For MQ,O=IBM,ST=MA,C=US)\n   STATUS(RUNNING)                         SUBSTATE(RECEIVE)\n\n")),(0,a.kt)("h3",{id:"denying-connections-based-on-sslpeer"},"Denying connections based on SSLPEER"),(0,a.kt)("p",null,"For this we are going to the remote queue and setting an SSL Peer setting for QM2"),(0,a.kt)("p",null,"On the remote host, start up the runmqsc session and set the SSLPEER value"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 errors]$ runmqsc QM2\n5724-H72 (C) Copyright IBM Corp. 1994, 2022.\nStarting MQSC for queue manager QM2.\n\nalter channel(QM1.TO.QM2) CHLTYPE(RCVR) SSLPEER('CN=John Cena, OU=Test, O=IBM, C=GB')\n")),(0,a.kt)("p",null,"Now attempt to connect and run the test from the local mq host"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc-mq-client errors]$ /opt/mqm/samp/bin/amqsput QUEUE.ON.QM2 QM1\nSample AMQSPUT0 start\ntarget queue is QUEUE.ON.QM2\ntest\ntest2\ntest3\n\nSample AMQSPUT0 end`\n\n")),(0,a.kt)("p",null,"These messages will not show up on our remote host. Instead we can see the following error in the AMQ001.log"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"06/28/2022 06:23:34 PM - Process(2051233.5) User(mqm) Program(amqrmppa)\n                    Host(wdc1-mq1) Installation(Installation1)\n                    VRMF(9.2.5.0) QMgr(QM2)\n                    Time(2022-06-28T18:23:34.836Z)\n                    RemoteHost(10.241.2.5)\n                    CommentInsert1(QM1.TO.QM2)\n                    CommentInsert2(SERIALNUMBER=78:40:26:54:E5:D4:80:E4,CN=QM1,OU=SSL For MQ,O=IBM,ST=MA,C=US)\n                    CommentInsert3(10.241.2.5)\n\nAMQ9636E: SSL distinguished name does not match peer name, channel\n'QM1.TO.QM2'.\n\nEXPLANATION:\nThe distinguished name, 'SERIALNUMBER=78:40:26:54:E5:D4:80:E4,CN=QM1,OU=SSL For\nMQ,O=IBM,ST=MA,C=US', contained in the SSL certificate for the remote end of\nthe channel does not match the local SSL peer name for channel 'QM1.TO.QM2'.\nThe distinguished name at the remote host '10.241.2.5' must match the peer name\nspecified (which can be generic) before the channel can be started.\nACTION:\nIf this remote system should be allowed to connect, either change the SSL peer\nname specification for the local channel so that it matches the distinguished\nname in the SSL certificate for the remote end of the channel, or obtain the\ncorrect certificate for the remote end of the channel.\n\nThis error might indicate that the remote end of the channel is configured to\nuse the wrong certificate. Check the certificate label for the remote end of\nthe channel.\n\nRestart the channel.\n")),(0,a.kt)("p",null,"If we remove the SSLPEER setting for that channel on the remote, we can see that connectivity should resume."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"display channel(QM1.TO.QM2)\n\n     1 : display channel(QM1.TO.QM2)\nAMQ8414I: Display Channel details.\n   CHANNEL(QM1.TO.QM2)                     CHLTYPE(RCVR)\n   ALTDATE(2022-06-28)                     ALTTIME(18.21.00)\n   BATCHSZ(50)                             CERTLABL(QM2)\n   COMPHDR(NONE)                           COMPMSG(NONE)\n   DESCR(Receiver channel using TLS from QM1 to QM2)\n   HBINT(300)                              KAINT(AUTO)\n   MAXMSGL(4194304)                        MCAUSER( )\n   MONCHL(QMGR)                            MRDATA( )\n   MREXIT( )                               MRRTY(10)\n   MRTMR(1000)                             MSGDATA( )\n   MSGEXIT( )                              NPMSPEED(FAST)\n   PUTAUT(DEF)                             RCVDATA( )\n   RCVEXIT( )                              RESETSEQ(NO)\n   SCYDATA( )                              SCYEXIT( )\n   SENDDATA( )                             SENDEXIT( )\n   SEQWRAP(999999999)                      SSLCAUTH(REQUIRED)\n   SSLCIPH(TLS_RSA_WITH_AES_128_CBC_SHA256)\n   SSLPEER(CN=John Cena, OU=Test, O=IBM, C=GB)\n   STATCHL(QMGR)                           TRPTYPE(TCP)\n   USEDLQ(YES)\n\nalter channel(QM1.TO.QM2) CHLTYPE(RCVR) SSLPEER('')\n\n     2 : alter channel(QM1.TO.QM2) CHLTYPE(RCVR) SSLPEER('')\nAMQ8016I: IBM MQ channel changed.\ndisplay channel(QM1.TO.QM2)\n     3 : display channel(QM1.TO.QM2)\nAMQ8414I: Display Channel details.\n   CHANNEL(QM1.TO.QM2)                     CHLTYPE(RCVR)\n   ALTDATE(2022-06-28)                     ALTTIME(18.31.34)\n   BATCHSZ(50)                             CERTLABL(QM2)\n   COMPHDR(NONE)                           COMPMSG(NONE)\n   DESCR(Receiver channel using TLS from QM1 to QM2)\n   HBINT(300)                              KAINT(AUTO)\n   MAXMSGL(4194304)                        MCAUSER( )\n   MONCHL(QMGR)                            MRDATA( )\n   MREXIT( )                               MRRTY(10)\n   MRTMR(1000)                             MSGDATA( )\n   MSGEXIT( )                              NPMSPEED(FAST)\n   PUTAUT(DEF)                             RCVDATA( )\n   RCVEXIT( )                              RESETSEQ(NO)\n   SCYDATA( )                              SCYEXIT( )\n   SENDDATA( )                             SENDEXIT( )\n   SEQWRAP(999999999)                      SSLCAUTH(REQUIRED)\n   SSLCIPH(TLS_RSA_WITH_AES_128_CBC_SHA256)\n   SSLPEER( )                              STATCHL(QMGR)\n   TRPTYPE(TCP)                            USEDLQ(YES)\n\nrefresh qmgr type(configev) object(channel)\n\n     4 : refresh qmgr type(configev) object(channel)\nAMQ8724I: Refresh IBM MQ Queue Manager accepted.\n")),(0,a.kt)("p",null,"So what can we do with SSLPEER?"),(0,a.kt)("p",null,"We can lock the receiver channel to one certificate by simply storing the CN info of our client cert into the SSLPEER field."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 errors]$ runmqsc QM2\n5724-H72 (C) Copyright IBM Corp. 1994, 2022.\nStarting MQSC for queue manager QM2.\n\n\nDISPLAY CHS(QM1.TO.QM2) SSLPEER SSLCERTI\n     1 : DISPLAY CHS(QM1.TO.QM2) SSLPEER SSLCERTI\nAMQ8417I: Display Channel Status details.\n   CHANNEL(QM1.TO.QM2)                     CHLTYPE(RCVR)\n   CONNAME(10.241.2.5)                     CURRENT\n   RQMNAME(QM1)\n   SSLCERTI(CN=QM1,OU=SSL For MQ,O=IBM,ST=MA,C=US)\n   SSLPEER(SERIALNUMBER=78:40:26:54:E5:D4:80:E4,CN=QM1,OU=SSL For MQ,O=IBM,ST=MA,C=US)\n   STATUS(RUNNING)                         SUBSTATE(RECEIVE)\n")),(0,a.kt)("p",null,"The SSLPEER setting above is what was read from the client self-signed cert. We can take that value and apply it to the channel itself and then any future certs will be rejected. So not everybody can connect even if their public cert is in the remote host keystore."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[mqm@wdc1-mq1 errors]$ runmqsc QM2\n5724-H72 (C) Copyright IBM Corp. 1994, 2022.\nStarting MQSC for queue manager QM2.\n\n\nalter channel(QM1.TO.QM2) CHLTYPE(RCVR) SSLPEER('SERIALNUMBER=78:40:26:54:E5:D4:80:E4,CN=QM1,OU=SSL For MQ,O=IBM,ST=MA,C=US')\n     1 : alter channel(QM1.TO.QM2) CHLTYPE(RCVR) SSLPEER('SERIALNUMBER=78:40:26:54:E5:D4:80:E4,CN=QM1,OU=SSL For MQ,O=IBM,ST=MA,C=US')\nAMQ8016I: IBM MQ channel changed.\nrefresh qmgr type(configev) object(channel)\n     2 : refresh qmgr type(configev) object(channel)\nAMQ8724I: Refresh IBM MQ Queue Manager accepted.\nquit\n")),(0,a.kt)("p",null,"Reference Links:"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.ibm.com/docs/en/ibm-mq/9.2?topic=windows-setting-up-key-repository-aix-linux"},"https://www.ibm.com/docs/en/ibm-mq/9.2?topic=windows-setting-up-key-repository-aix-linux")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.ibm.com/docs/en/ibm-mq/9.0?topic=tls-configuring-security-mq"},"https://www.ibm.com/docs/en/ibm-mq/9.0?topic=tls-configuring-security-mq")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.ibm.com/docs/en/ibm-mq/9.0?topic=securing-planning-your-security-requirements"},"https://www.ibm.com/docs/en/ibm-mq/9.0?topic=securing-planning-your-security-requirements")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.ibm.com/docs/en/ibm-mq/9.0?topic=mechanisms-message-security-in-mq"},"https://www.ibm.com/docs/en/ibm-mq/9.0?topic=mechanisms-message-security-in-mq")))}d.isMDXComponent=!0}}]);